{"version":3,"sources":["services/notes.js","services/login.js","components/loginPage.js","components/toggle.js","components/noteForm.js","App.js","serviceWorker.js","index.js"],"names":["token","getAll","a","axios","get","response","data","create","newObject","config","headers","Authorization","post","update","id","patch","important","catch","error","console","log","deleteNote","note","delete","setToken","newToken","login","credentials","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","username","password","onSubmit","value","onChange","type","Togglable","forwardRef","props","ref","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","current","focus","useImperativeHandle","style","onClick","buttonLabel","children","NoteForm","handleChange","user","newNote","setNewNote","notes","setNotes","event","preventDefault","noteObject","content","name","date","Date","toISOString","Math","random","noteService","then","returnedNote","concat","target","Note","toggleImportance","label","createdBy","JSON","stringify","toString","Notification","errorMessage","text","status","className","App","showAll","setShowAll","setErrorMessage","setUsername","setPassword","setUser","inputRef","useRef","useEffect","initialNotes","loggedUserJSON","window","localStorage","getItem","parse","handleMessage","setTimeout","notesToShow","filter","addNote","index","indexOf","noteUser","currentUser","splice","handleLogin","loginService","setItem","handleLogout","removeItem","map","key","find","n","noteAuthor","changedNote","updatedNotes","toggleImportanceOf","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.401156cc.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nlet token = null\n\nconst setToken = (newToken) => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = async () => {\n  const response = await axios.get(baseUrl)\n  return response.data\n}\n\nconst create = async (newObject) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\n/* const update = async (id, note) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  console.log('note from note service', note)\n\n  const response = await axios\n    .patch(`${baseUrl}/${id}`, note, config)\n    .catch((error) => console.log('Errors:', error))\n  console.log('response - update', response)\n  // return response.data\n} */\nconst update = async (id, newObject) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  await axios\n    .patch(\n      `${baseUrl}/${id}`,\n      { id: newObject.id, important: newObject.important },\n      config\n    )\n    .catch((error) => console.log('Errors:', error))\n}\n\nconst deleteNote = async (note) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  const response = await axios.delete(`${baseUrl}/${note.id}`, config)\n  return response.data\n}\nexport default {\n  getAll,\n  create,\n  update,\n  deleteNote,\n  setToken,\n}\n","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async (credentials) => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nexport default { login }\n","import React from 'react'\n\nconst LoginForm = ({\n   handleSubmit,\n   handleUsernameChange,\n   handlePasswordChange,\n   username,\n   password\n  }) => {\n  return (\n    <div>\n      <h2>Login</h2>\n\n      <form onSubmit={handleSubmit}>\n        <div>\n          username\n          <input\n            value={username}\n            onChange={handleUsernameChange}\n          />\n        </div>\n        <div>\n          password\n          <input\n            type=\"password\"\n            value={password}\n            onChange={handlePasswordChange}\n          />\n      </div>\n        <button type=\"submit\">login</button>\n      </form>\n    </div>\n  )\n}\n\nexport default LoginForm","import React, { useState, useImperativeHandle, forwardRef } from 'react'\n\nconst Togglable = forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n    if (visible) {\n      ref.current.focus()\n    }\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility,\n    }\n  })\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible} >\n        {props.children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n})\n\nexport default Togglable\n","import React, { useState, useEffect, useRef, createRef, forwardRef } from 'react'\nimport noteService from '../services/notes'\n\n\nconst NoteForm = forwardRef(({ onSubmit, handleChange, value, user, ref }) => {\n  const [newNote, setNewNote] = useState('')\n  const [notes, setNotes] = useState([])\n\n  const handleInputChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      user: { username: user.username, name: user.name },\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    }\n\n    noteService\n      .create(noteObject)\n      .then((returnedNote) => {\n        setNotes(notes.concat(returnedNote))\n       // handleMessage({ text: 'Note successfully added', status: 'OK' })\n        setNewNote('')\n      })\n      .catch((error) => {\n       // handleMessage({ text: error.response.data.error })\n      })\n\n    setNewNote('')\n  }\n\n\n  return (\n    <div>\n      <h2>Create a new note</h2>\n\n      <form onSubmit={addNote}>\n        <input value={value} onChange={handleInputChange} ref={ref} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n})\n\nexport default NoteForm\n","import React, { useState, useEffect, createRef, useRef } from 'react'\r\nimport noteService from './services/notes'\r\nimport loginService from './services/login'\r\nimport LoginForm from './components/loginPage'\r\nimport Togglable from './components/toggle'\r\nimport NoteForm from './components/noteForm'\r\nimport './App.css'\r\n\r\nconst Note = ({ note, user, toggleImportance, deleteNote }) => {\r\n  const label = note.important ? 'make not important' : 'make important'\r\n  const createdBy = JSON.stringify(note.user.name)\r\n\r\n  //console.log('toggleImportance', toggleImportance)\r\n  return (\r\n    <li>\r\n      Important? {note.important.toString()}::: {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n      <button value={note.id} onClick={() => deleteNote(note)}>\r\n        Delete\r\n      </button>\r\n      <br />\r\n      Created by: {createdBy}\r\n    </li>\r\n  )\r\n}\r\n\r\nconst Notification = ({ errorMessage, text}) => {\r\n  if (errorMessage === null) {\r\n    return null\r\n  }\r\n\r\n  if (errorMessage.status === 'OK') {\r\n    return (\r\n      <div text={text} className=\"notify\">\r\n        {errorMessage.text}\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div text={text} className=\"error\">\r\n        {errorMessage.text}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [user, setUser] = useState(null)\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  const hideWhenVisible = { display: visible ? 'none' : '' }\r\n  const showWhenVisible = { display: visible ? '' : 'none' }\r\n\r\n  const toggleVisibility = () => {\r\n    setVisible(!visible)\r\n  }\r\n\r\n  const inputRef = useRef()\r\n\r\n  useEffect(() => {\r\n    if (visible) {\r\n      inputRef.current.focus()\r\n    }\r\n  }, [visible])\r\n\r\n  useEffect(() => {\r\n    noteService.getAll().then((initialNotes) => {\r\n      setNotes(initialNotes)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\r\n    if (loggedUserJSON) {\r\n      const user = JSON.parse(loggedUserJSON)\r\n      setUser(user)\r\n      noteService.setToken(user.token)\r\n    }\r\n  }, [])\r\n\r\n  const handleMessage = (data) => {\r\n    setErrorMessage(data)\r\n    setTimeout(() => {\r\n      setErrorMessage(null)\r\n    }, 3000)\r\n  }\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter((note) => note.important === true)\r\n\r\n  /* \r\n Add Note form\r\n */\r\n  const handleInputChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      user: { username: user.username, name: user.name },\r\n      date: new Date().toISOString(),\r\n      important: Math.random() < 0.5,\r\n    }\r\n\r\n    noteService\r\n      .create(noteObject)\r\n      .then((returnedNote) => {\r\n        setNotes(notes.concat(returnedNote))\r\n        handleMessage({ text: 'Note successfully added', status: 'OK' })\r\n        setNewNote('')\r\n      })\r\n      .catch((error) => {\r\n        handleMessage({ text: error.response.data.error })\r\n      })\r\n\r\n    setNewNote('')\r\n  }\r\n\r\n  /*  const noteForm = () => {\r\n    return (\r\n      <div>\r\n        <div style={hideWhenVisible}>\r\n          <button onClick={toggleVisibility}>new note</button>\r\n        </div>\r\n        <div style={showWhenVisible}>\r\n          <h2>Create a new note</h2>\r\n\r\n          <form onSubmit={addNote}>\r\n            <input\r\n              value={newNote}\r\n              onChange={handleInputChange}\r\n              ref={inputRef}\r\n            />\r\n            <button type=\"submit\">save</button>\r\n          </form>\r\n\r\n          <button onClick={toggleVisibility}>cancel</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  } */\r\n\r\n  /*   const handleAddNote = (noteObject) => {\r\n        event.preventDefault()\r\n\r\n    const noteObject = {\r\n      content: newNote,\r\n      user: { username: user.username, name: user.name },\r\n      date: new Date().toISOString(),\r\n      important: Math.random() < 0.5,\r\n    }\r\n    noteFormRef.current.toggleVisibility()\r\n\r\n    console.log(' noteFormRef.current', noteFormRef.current)\r\n\r\n    noteService\r\n      .create(noteObject)\r\n      .then((returnedNote) => {\r\n        setNotes(notes.concat(returnedNote))\r\n        handleMessage({ text: 'Note successfully added', status: 'OK' })\r\n        setNewNote('')\r\n      })\r\n      .catch((error) => {\r\n        handleMessage({ text: error.response.data.error })\r\n      })\r\n  } */\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find((n) => n.id === id)\r\n\r\n    const noteAuthor = note.user.name\r\n    const currentUser = user.name\r\n    const changedNote = { ...note, important: !note.important }\r\n    const updatedNotes = notesToShow.map((note) =>\r\n      note.id !== id ? note : changedNote\r\n    )\r\n    if (noteAuthor !== currentUser) {\r\n      setNotes(notesToShow)\r\n      handleMessage({\r\n        text: ` '${currentUser}' is not authorized to change this note `,\r\n      })\r\n      return\r\n    } else {\r\n      noteService\r\n        .update(id, changedNote)\r\n        .then(() => {\r\n          setNotes(updatedNotes)\r\n          handleMessage({\r\n            text: `the importance of note '${\r\n              note.id\r\n            }' has been changed to ${changedNote.important.toString()} `,\r\n            status: 'OK',\r\n          })\r\n        })\r\n        .catch((error) => {\r\n          console.log('error', error)\r\n          setErrorMessage({\r\n            text: `the note '${note.content}' was already deleted from server`,\r\n          })\r\n          setTimeout(() => {\r\n            setErrorMessage(null)\r\n          }, 5000)\r\n        })\r\n    }\r\n  }\r\n\r\n    const handleNoteChange = (event) => {\r\n      // Called by <Toggleable> <NoteForm> new note\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const deleteNote = (note) => {\r\n    let index = notes.indexOf(note)\r\n\r\n    const noteUser = note.user.name\r\n    const currentUser = user.name\r\n\r\n    if (noteUser === currentUser) {\r\n      noteService.deleteNote(note).then(() => {\r\n        handleMessage({ text: `Note id: ${note.id} deleted`, status: 'OK' })\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 3000)\r\n      })\r\n      notes.splice(index, 1)\r\n      setNotes([...notes])\r\n    }\r\n    if (noteUser !== currentUser) {\r\n      handleMessage({ text: `${currentUser} not authorized` })\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 3000)\r\n    } else if (user === null) {\r\n      handleMessage({ text: `Who are you?` })\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 3000)\r\n    }\r\n  }\r\n\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault()\r\n    try {\r\n      const user = await loginService.login({\r\n        username,\r\n        password,\r\n      })\r\n      window.localStorage.setItem('loggedNoteappUser', JSON.stringify(user))\r\n      noteService.setToken(user.token)\r\n      setUser(user)\r\n      setUsername('')\r\n      setPassword('')\r\n    } catch (exception) {\r\n      handleMessage({ text: exception.response.data.error })\r\n    }\r\n  }\r\n\r\n  const handleLogout = async (event) => {\r\n    event.preventDefault()\r\n    window.localStorage.removeItem('loggedNoteappUser')\r\n    setUser(null)\r\n  }\r\n\r\n  const loginForm = () => {\r\n    return (\r\n      <div>\r\n        <Togglable buttonLabel=\"login\">\r\n          <LoginForm\r\n            username={username}\r\n            password={password}\r\n            handleUsernameChange={({ target }) => setUsername(target.value)}\r\n            handlePasswordChange={({ target }) => setPassword(target.value)}\r\n            handleSubmit={handleLogin}\r\n          />\r\n        </Togglable>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  /*   const noteFormRef = createRef()\r\n\r\n  const noteForm = () => (\r\n    <Toggleable>\r\n    <div>\r\n      <div style={hideWhenVisible}>\r\n        <button onClick={toggleVisibility}>new note</button>\r\n      </div>\r\n      <div style={showWhenVisible}>\r\n        <NoteForm createNote={handleAddNote} user={user} />\r\n\r\n        <button onClick={toggleVisibility}>cancel</button>\r\n      </div>\r\n    </div>\r\n\r\n  ) */\r\n\r\n\r\n  return (\r\n    <div>\r\n       <h1> NOTES APP EXPERIMENT</h1>\r\n       <Togglable buttonLabel=\"new note\">\r\n  <NoteForm\r\n    onSubmit={addNote}\r\n    value={newNote}\r\n    handleChange={handleNoteChange}\r\n    ref={inputRef}\r\n  />\r\n</Togglable>\r\n      <h1> NOTES APP</h1>\r\n\r\n      <Notification errorMessage={errorMessage} />\r\n      {user === null ? (\r\n        loginForm()\r\n      ) : (\r\n        <div>\r\n          <p>\r\n            {user.name} is logged in{' '}\r\n            <button onClick={handleLogout}>logout</button>\r\n          </p>\r\n          <div>\r\n            <div style={hideWhenVisible}>\r\n              <button onClick={toggleVisibility}>new note</button>\r\n            </div>\r\n            <div style={showWhenVisible}>\r\n              <h2>Create a new note</h2>\r\n\r\n              <form onSubmit={addNote}>\r\n                <input\r\n                  value={newNote}\r\n                  onChange={handleInputChange}\r\n                  ref={inputRef}\r\n                />\r\n                <button type=\"submit\">save</button>\r\n              </form>\r\n\r\n              <button onClick={toggleVisibility}>cancel</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note) => (\r\n          <Note\r\n            key={note.id}\r\n            note={note}\r\n            user={user}\r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n            deleteNote={deleteNote}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more aout service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n\r\n//https://fullstackopen.com/en\r\n"],"sourceRoot":""}