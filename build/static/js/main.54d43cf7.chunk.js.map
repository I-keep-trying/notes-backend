{"version":3,"sources":["services/notes.js","services/login.js","components/loginPage.js","components/toggle.js","components/noteForm.js","App.js","serviceWorker.js","index.js"],"names":["token","getAll","a","axios","get","response","data","create","newObject","config","headers","Authorization","post","update","id","console","log","patch","important","deleteNote","note","delete","setToken","newToken","login","credentials","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","username","password","onSubmit","value","onChange","type","Togglable","props","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","style","onClick","buttonLabel","children","NoteForm","handleChange","Note","toggleImportance","user","label","createdBy","JSON","stringify","name","toString","content","Notification","errorMessage","text","status","className","App","notes","setNotes","newNote","setNewNote","showAll","setShowAll","setErrorMessage","setUsername","setPassword","setUser","useEffect","noteService","then","initialNotes","loggedUserJSON","window","localStorage","getItem","parse","handleMessage","setTimeout","notesToShow","filter","addNote","event","preventDefault","noteObject","date","Date","toISOString","Math","random","returnedNote","concat","catch","error","handleNoteChange","target","index","indexOf","noteUser","currentUser","splice","handleLogin","loginService","setItem","handleLogout","removeItem","map","key","find","n","noteAuthor","changedNote","updatedNotes","toggleImportanceOf","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.54d43cf7.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nlet token = null\n\nconst setToken = (newToken) => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = async () => {\n  const response = await axios.get(baseUrl)\n  return response.data\n}\n\nconst create = async (newObject) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\n/* const update = async (id, note) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  console.log('note from note service', note)\n\n  const response = await axios\n    .patch(`${baseUrl}/${id}`, note, config)\n    .catch((error) => console.log('Errors:', error))\n  console.log('response - update', response)\n  // return response.data\n} */\nconst update = async (id, newObject) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  console.log('update - newObject', newObject)\n  const response = await axios.patch(\n    `${baseUrl}/${id}`,\n    { id: newObject.id, important: newObject.important },\n    config\n  )\n  console.log('update - response', response)\n}\n\nconst deleteNote = async (note) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  const response = await axios.delete(`${baseUrl}/${note.id}`, config)\n  return response.data\n}\nexport default {\n  getAll,\n  create,\n  update,\n  deleteNote,\n  setToken,\n}\n","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async (credentials) => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nexport default { login }\n","import React from 'react'\n\nconst LoginForm = ({\n   handleSubmit,\n   handleUsernameChange,\n   handlePasswordChange,\n   username,\n   password\n  }) => {\n  return (\n    <div>\n      <h2>Login</h2>\n\n      <form onSubmit={handleSubmit}>\n        <div>\n          username\n          <input\n            value={username}\n            onChange={handleUsernameChange}\n          />\n        </div>\n        <div>\n          password\n          <input\n            type=\"password\"\n            value={password}\n            onChange={handlePasswordChange}\n          />\n      </div>\n        <button type=\"submit\">login</button>\n      </form>\n    </div>\n  )\n}\n\nexport default LoginForm","import React, { useState } from 'react'\n\nconst Togglable = (props) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible}>\n        {props.children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Togglable\n","import React from 'react'\n\nconst NoteForm = ({ onSubmit, handleChange, value }) => {\n  return (\n    <div>\n      <h2>Create a new note</h2>\n\n      <form onSubmit={onSubmit}>\n        <input value={value} onChange={handleChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default NoteForm\n","import React, { useState, useEffect } from 'react'\r\nimport noteService from './services/notes'\r\nimport loginService from './services/login'\r\nimport LoginForm from './components/loginPage'\r\nimport Togglable from './components/toggle'\r\nimport NoteForm from './components/noteForm'\r\nimport './App.css'\r\n\r\nconst Note = ({ note, user, toggleImportance, deleteNote }) => {\r\n  const label = note.important ? 'make not important' : 'make important'\r\n  const createdBy = JSON.stringify(note.user.name)\r\n\r\n  //console.log('toggleImportance', toggleImportance)\r\n  return (\r\n    <li>\r\n      Important? {note.important.toString()}::: {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n      <button value={note.id} onClick={() => deleteNote(note)}>\r\n        Delete\r\n      </button>\r\n      <br />\r\n      Created by: {createdBy}\r\n    </li>\r\n  )\r\n}\r\n\r\nconst Notification = ({ errorMessage, text, status }) => {\r\n  if (errorMessage === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div text={text} status={status} className=\"error\">\r\n      {errorMessage.text}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [user, setUser] = useState(null)\r\n\r\n  useEffect(() => {\r\n    noteService.getAll().then((initialNotes) => {\r\n      setNotes(initialNotes)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\r\n    if (loggedUserJSON) {\r\n      const user = JSON.parse(loggedUserJSON)\r\n      setUser(user)\r\n      noteService.setToken(user.token)\r\n    }\r\n  }, [])\r\n\r\n  const handleMessage = (data) => {\r\n    setErrorMessage(data)\r\n    setTimeout(() => {\r\n      setErrorMessage(null)\r\n    }, 3000)\r\n  }\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter((note) => note.important === true)\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n\r\n    const noteObject = {\r\n      content: newNote,\r\n      user: { username: user.username, name: user.name },\r\n      date: new Date().toISOString(),\r\n      important: Math.random() < 0.5,\r\n    }\r\n    noteService\r\n      .create(noteObject)\r\n      .then((returnedNote) => {\r\n        setNotes(notes.concat(returnedNote))\r\n        setNewNote('')\r\n      })\r\n      .catch((error) => {\r\n        handleMessage({ text: error.response.data.error })\r\n      })\r\n  }\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find((n) => n.id === id)\r\n\r\n    const noteAuthor = note.user.name\r\n    const currentUser = user.name\r\n    const changedNote = { ...note, important: !note.important }\r\n    const updatedNotes = notesToShow.map((note) =>\r\n      note.id !== id ? note : changedNote\r\n    )\r\n    if (noteAuthor !== currentUser) {\r\n      setNotes(notesToShow)\r\n      handleMessage({\r\n        text: ` '${currentUser}' is not authorized to change this note `,\r\n      })\r\n      return\r\n    } else {\r\n      noteService\r\n        .update(id, changedNote)\r\n        .then((returnedNote) => {\r\n          setNotes(updatedNotes)\r\n          handleMessage({\r\n            text: `the importance of note '${\r\n              note.id\r\n            }' has been changed to ${changedNote.important.toString()} `,\r\n          })\r\n        })\r\n        .catch((error) => {\r\n          console.log('error', error)\r\n          setErrorMessage({\r\n            text: `the note '${note.content}' was already deleted from server`,\r\n          })\r\n          setTimeout(() => {\r\n            setErrorMessage(null)\r\n          }, 5000)\r\n        })\r\n    }\r\n  }\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const deleteNote = (note) => {\r\n    let index = notes.indexOf(note)\r\n\r\n    const noteUser = note.user.name\r\n    const currentUser = user.name\r\n\r\n    if (noteUser === currentUser) {\r\n      noteService.deleteNote(note).then(() => {\r\n        setErrorMessage({ text: `Note id: ${note.id} deleted`, status: 'ok' })\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 3000)\r\n      })\r\n      notes.splice(index, 1)\r\n      setNotes([...notes])\r\n    }\r\n    if (noteUser !== currentUser) {\r\n      setErrorMessage({ text: `${currentUser} not authorized`, status: 'ok' })\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 3000)\r\n    } else if (user === null) {\r\n      setErrorMessage({ text: `Who are you?`, status: 'ok' })\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 3000)\r\n    }\r\n  }\r\n\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault()\r\n    try {\r\n      const user = await loginService.login({\r\n        username,\r\n        password,\r\n      })\r\n      window.localStorage.setItem('loggedNoteappUser', JSON.stringify(user))\r\n      noteService.setToken(user.token)\r\n      setUser(user)\r\n      setUsername('')\r\n      setPassword('')\r\n    } catch (exception) {\r\n      handleMessage({ text: exception.response.data.error })\r\n    }\r\n  }\r\n\r\n  const handleLogout = async (event) => {\r\n    event.preventDefault()\r\n    window.localStorage.removeItem('loggedNoteappUser')\r\n    setUser(null)\r\n  }\r\n\r\n  const loginForm = () => {\r\n    return (\r\n      <div>\r\n        <Togglable buttonLabel=\"login\">\r\n          <LoginForm\r\n            username={username}\r\n            password={password}\r\n            handleUsernameChange={({ target }) => setUsername(target.value)}\r\n            handlePasswordChange={({ target }) => setPassword(target.value)}\r\n            handleSubmit={handleLogin}\r\n          />\r\n        </Togglable>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const noteForm = () => (\r\n    <Togglable buttonLabel=\"new note\">\r\n      <NoteForm\r\n        onSubmit={addNote}\r\n        value={newNote}\r\n        handleChange={handleNoteChange}\r\n      />\r\n    </Togglable>\r\n  )\r\n\r\n  /*   const title = () => {\r\n    if (showAll === true) {\r\n      return <h1>Notes: All Notes</h1>\r\n    } else {\r\n      return <h1>Notes: Important Notes</h1>\r\n    }\r\n  }\r\n  console.log(title) */\r\n  return (\r\n    <div>\r\n      {/*       {title()} */}\r\n      <h1> NOTES APP</h1>\r\n\r\n      <Notification errorMessage={errorMessage} />\r\n      {user === null ? (\r\n        loginForm()\r\n      ) : (\r\n        <div>\r\n          <p>\r\n            {user.name} is logged in{' '}\r\n            <button onClick={handleLogout}>logout</button>\r\n          </p>\r\n          {noteForm()}\r\n        </div>\r\n      )}\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note) => (\r\n          <Note\r\n            key={note.id}\r\n            note={note}\r\n            user={user}\r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n            deleteNote={deleteNote}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more aout service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n\r\n//https://fullstackopen.com/en\r\n"],"sourceRoot":""}