{"version":3,"sources":["services/notes.js","services/login.js","components/loginPage.js","components/Notification.js","components/toggle.js","components/Note.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["token","getAll","a","axios","get","response","data","create","newObject","config","headers","Authorization","post","update","id","patch","important","catch","error","console","log","deleteNote","note","delete","setToken","newToken","login","credentials","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","username","password","onSubmit","type","value","onChange","Notification","forwardRef","props","ref","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","onClick","buttonLabel","children","errorMessage","text","status","className","Note","toggleImportance","label","createdBy","JSON","stringify","user","name","toString","content","Footer","App","notes","setNotes","newNote","setNewNote","showAll","setShowAll","setErrorMessage","setUsername","setPassword","setUser","useEffect","noteService","then","initialNotes","loggedUserJSON","window","localStorage","getItem","parse","handleMessage","setTimeout","notesToShow","filter","index","indexOf","noteUser","currentUser","splice","handleLogin","event","preventDefault","loginService","setItem","handleLogout","removeItem","target","noteObject","date","Date","toISOString","Math","random","returnedNote","concat","tabIndex","autoFocus","map","key","find","n","noteAuthor","changedNote","updatedNotes","toggleImportanceOf","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.318e341b.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nlet token = null\n\nconst setToken = (newToken) => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = async () => {\n  const response = await axios.get(baseUrl)\n  return response.data\n}\n\nconst create = async (newObject) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\n/* const update = async (id, note) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  console.log('note from note service', note)\n\n  const response = await axios\n    .patch(`${baseUrl}/${id}`, note, config)\n    .catch((error) => console.log('Errors:', error))\n  console.log('response - update', response)\n  // return response.data\n} */\nconst update = async (id, newObject) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  await axios\n    .patch(\n      `${baseUrl}/${id}`,\n      { id: newObject.id, important: newObject.important },\n      config\n    )\n    .catch((error) => console.log('Errors:', error))\n}\n\nconst deleteNote = async (note) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  const response = await axios.delete(`${baseUrl}/${note.id}`, config)\n  return response.data\n}\nexport default {\n  getAll,\n  create,\n  update,\n  deleteNote,\n  setToken,\n}\n","import axios from 'axios'\nconst baseUrl = '/api/login'\n\n\nconst login = async (credentials) => {\n\n  const response = await axios.post(baseUrl, credentials)\n  console.log('login service: ', response.data)\n  return response.data\n}\n\nexport default { login }\n","import React from 'react'\n\nconst LoginForm = ({\n  handleSubmit,\n  handleUsernameChange,\n  handlePasswordChange,\n  username,\n  password,\n}) => {\n\n  return (\n    <div>\n      <h2>Login</h2>\n\n      <form onSubmit={handleSubmit}>\n        <div>\n          username\n          <input type=\"text\" value={username} onChange={handleUsernameChange} />\n        </div>\n        <div>\n          password\n          <input\n            type=\"password\"\n            value={password}\n            onChange={handlePasswordChange}\n          />\n        </div>\n        <button type=\"submit\">login</button>\n      </form>\n    </div>\n  )\n}\n\nexport default LoginForm\n","import React from 'react'\n\nconst Notification = ({ errorMessage, text }) => {\n  if (errorMessage === null) {\n    return null\n  }\n\n  if (errorMessage.status === 'OK') {\n    return (\n      <div text={text} className=\"notify\">\n        {errorMessage.text}\n      </div>\n    )\n  } else {\n    return (\n      <div text={text} className=\"error\">\n        {errorMessage.text}\n      </div>\n    )\n  }\n}\n\nexport default Notification\n","import React, { useState, useImperativeHandle, forwardRef } from 'react'\n\nconst Togglable = forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility,\n    }\n  })\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible} >\n        {props.children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n})\n\nexport default Togglable\n","import React from 'react'\n\nconst Note = ({ note, toggleImportance, deleteNote }) => {\n    const label = note.important ? 'make not important' : 'make important'\n    const createdBy = JSON.stringify(note.user.name)\n  \n    return (\n      <li>\n        Important? {note.important.toString()}::: {note.content}\n        <button onClick={toggleImportance}>{label}</button>\n        <button value={note.id} onClick={() => deleteNote(note)}>\n          Delete\n        </button>\n        <br />\n        Created by: {createdBy}\n      </li>\n    )\n  }\n\n  export default Note","import React from 'react'\n\nconst Footer = () => {\n  return (\n    <div className={'footer'}>\n      <br />\n      <em>Note app, Andrea Crego </em>\n    </div>\n  )\n}\n\nexport default Footer\n","import React, { useState, useEffect } from 'react'\r\nimport noteService from './services/notes'\r\nimport loginService from './services/login'\r\nimport LoginForm from './components/loginPage'\r\nimport Togglable from './components/toggle'\r\nimport Notification from './components/Notification'\r\nimport Note from './components/Note'\r\nimport Footer from './components/Footer'\r\n\r\nimport './App.css'\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [user, setUser] = useState(null)\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  const hideWhenVisible = { display: visible ? 'none' : '' }\r\n  const showWhenVisible = { display: visible ? '' : 'none' }\r\n\r\n  const toggleVisibility = () => {\r\n    setVisible(!visible)\r\n    if (visible) {\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    noteService.getAll().then((initialNotes) => {\r\n      setNotes(initialNotes)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\r\n    console.log('loggedUserJSON', loggedUserJSON)\r\n    if (loggedUserJSON) {\r\n      const user = JSON.parse(loggedUserJSON)\r\n      console.log('parsed user', user)\r\n      setUser(user)\r\n      noteService.setToken(user.token)\r\n    } else {\r\n      return null\r\n    }\r\n  }, [])\r\n\r\n  const handleMessage = (data) => {\r\n    setErrorMessage(data)\r\n    setTimeout(() => {\r\n      setErrorMessage(null)\r\n    }, 3000)\r\n  }\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter((note) => note.important === true)\r\n\r\n  /* \r\n Add Note form\r\n */\r\n\r\n  const handleAddNote = (event) => {\r\n    event.preventDefault()\r\n\r\n    const noteObject = {\r\n      content: newNote,\r\n      user: { username: user.username, name: user.name },\r\n      date: new Date().toISOString(),\r\n      important: Math.random() < 0.5,\r\n    }\r\n\r\n    noteService\r\n      .create(noteObject)\r\n      .then((returnedNote) => {\r\n        setNotes(notes.concat(returnedNote))\r\n        handleMessage({ text: 'Note successfully added', status: 'OK' })\r\n        setNewNote('')\r\n      })\r\n      .catch((error) => {\r\n        handleMessage({ text: error.response.data.error })\r\n      })\r\n  }\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find((n) => n.id === id)\r\n\r\n    const noteAuthor = note.user.name\r\n    const currentUser = user.name\r\n    const changedNote = { ...note, important: !note.important }\r\n    const updatedNotes = notesToShow.map((note) =>\r\n      note.id !== id ? note : changedNote\r\n    )\r\n    if (noteAuthor !== currentUser) {\r\n      setNotes(notesToShow)\r\n      handleMessage({\r\n        text: ` '${currentUser}' is not authorized to change this note `,\r\n      })\r\n      return\r\n    } else {\r\n      noteService\r\n        .update(id, changedNote)\r\n        .then(() => {\r\n          setNotes(updatedNotes)\r\n          handleMessage({\r\n            text: `the importance of note '${\r\n              note.id\r\n            }' has been changed to ${changedNote.important.toString()} `,\r\n            status: 'OK',\r\n          })\r\n        })\r\n        .catch((error) => {\r\n          console.log('error', error)\r\n          setErrorMessage({\r\n            text: `the note '${note.content}' was already deleted from server`,\r\n          })\r\n          setTimeout(() => {\r\n            setErrorMessage(null)\r\n          }, 5000)\r\n        })\r\n    }\r\n  }\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const deleteNote = (note) => {\r\n    let index = notes.indexOf(note)\r\n\r\n    const noteUser = note.user.name\r\n    const currentUser = user.name\r\n\r\n    if (noteUser === currentUser) {\r\n      noteService.deleteNote(note).then(() => {\r\n        handleMessage({ text: `Note id: ${note.id} deleted`, status: 'OK' })\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 3000)\r\n      })\r\n      notes.splice(index, 1)\r\n      setNotes([...notes])\r\n    }\r\n    if (noteUser !== currentUser) {\r\n      handleMessage({ text: `${currentUser} not authorized`, status: 'error' })\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 3000)\r\n    } else if (user === null) {\r\n      handleMessage({ text: `Who are you?` })\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 3000)\r\n    }\r\n  }\r\n\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault()\r\n    try {\r\n      const user = await loginService.login({\r\n        username,\r\n        password,\r\n      })\r\n      window.localStorage.setItem('loggedNoteappUser', JSON.stringify(user))\r\n      noteService.setToken(user.token)\r\n      setUser(user)\r\n      setUsername('')\r\n      setPassword('')\r\n    } catch (exception) {\r\n      handleMessage({ text: `wrong credentials` })\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 3000)\r\n    }\r\n  }\r\n\r\n  const handleLogout = async (event) => {\r\n    event.preventDefault()\r\n    window.localStorage.removeItem('loggedNoteappUser')\r\n    setUser(null)\r\n  }\r\n\r\n  const loginForm = () => {\r\n    return (\r\n      <div>\r\n        <div style={hideWhenVisible}>\r\n          <button onClick={() => setVisible(true)}>log in</button>\r\n        </div>\r\n        <div style={showWhenVisible}>\r\n          <LoginForm\r\n            username={username}\r\n            password={password}\r\n            handleUsernameChange={({ target }) => setUsername(target.value)}\r\n            handlePasswordChange={({ target }) => setPassword(target.value)}\r\n            handleSubmit={handleLogin}\r\n          />\r\n          <button onClick={() => setVisible(false)}>cancel</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1> NOTES APP</h1>\r\n\r\n      <Notification errorMessage={errorMessage} />\r\n      {user === null ? (\r\n        loginForm()\r\n      ) : (\r\n        <div>\r\n          <p>\r\n            {user.name} is logged in{' '}\r\n            <button onClick={handleLogout}>logout</button>\r\n          </p>\r\n          <div>\r\n            <div style={hideWhenVisible}>\r\n              <button onClick={toggleVisibility}>new note</button>\r\n            </div>\r\n            <div style={showWhenVisible}>\r\n              <div>\r\n                <h2>Create a new note app.js</h2>\r\n\r\n                <form onSubmit={handleAddNote}>\r\n                  <input\r\n                    value={newNote}\r\n                    onChange={handleNoteChange}\r\n                    tabIndex=\"-1\"\r\n                    autoFocus\r\n                  />\r\n                  <button type=\"submit\">save</button>\r\n                </form>\r\n              </div>\r\n\r\n              <button onClick={toggleVisibility}>cancel</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note) => (\r\n          <Note\r\n            key={note.id}\r\n            note={note}\r\n            user={user}\r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n            deleteNote={deleteNote}\r\n          />\r\n        ))}\r\n      </ul>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more aout service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n\r\n//https://fullstackopen.com/en\r\n"],"sourceRoot":""}